->학생 데이터 입력 
--학생 데이터 입력 프로시저
CREATE OR REPLACE PROCEDURE PRC_STUDENT_INSERT
( V_STU_NAME    IN  STUDENT.STU_NAME%TYPE
, V_STU_SSN     IN  STUDENT.STU_SSN%TYPE
, V_STU_TEL     IN  STUDENT.STU_TEL%TYPE
)
IS
    V_STU_ID            STUDENT.STU_ID%TYPE;
    V_STU_ID_NUM        NUMBER(3);
    ISNULL_STU_SSN      NUMBER(1);
    ISNULL_DROP_STU_ID  NUMBER(1);
    REENTRANCE_ERROR    EXCEPTION;
    NUM_OVER_ERROR  EXCEPTION;
    V_DROP_STU_ID  STUDENT.STU_ID%TYPE;
    V_DROP_STU_ID2 STUDENT.STU_ID%TYPE;
    V_DROP_STU_ID3 STUDENT.STU_ID%TYPE;

BEGIN
     IF (V_STU_ID_NUM > 999)         ---ID숫자가 999이상이 되면 에러
        THEN RAISE NUM_OVER_ERROR;
    END IF;

    -- 입력한 주민번호와 중복된 주민번호와 아이디가 존재하면 1, 존재하지 않으면 0 뽑아내기
    SELECT NVL2(MAX(STU_SSN), 1, 0), MAX(STU_ID) INTO ISNULL_STU_SSN, V_STU_ID
    FROM STUDENT
    WHERE STU_SSN = V_STU_SSN;

    -- 
    SELECT NVL2(MAX(DROP_STU_ID), 1, 0) INTO ISNULL_DROP_STU_ID
    FROM DROPSTUDENT
    WHERE STU_ID = V_STU_ID;
    
    IF(ISNULL_STU_SSN=0) -- 신규가입
        THEN -- ID숫자부분 붙이기
            SELECT NVL(MAX(TO_NUMBER(SUBSTR(STU_ID,5))), 0 ) + 1 INTO V_STU_ID_NUM
            FROM STUDENT;
            V_STU_ID := 'S'||TO_CHAR(SYSDATE,'YY')||'_'||LPAD(TO_CHAR(V_STU_ID_NUM), 4, '0');
        
            --새 정보 INSERT하기
            INSERT INTO STUDENT(STU_ID, STU_NAME, STU_SSN, STU_TEL)
            SELECT V_STU_ID, V_STU_NAME, V_STU_SSN, V_STU_TEL
            FROM DUAL
            WHERE NOT EXISTS (SELECT * FROM STUDENT WHERE STU_SSN=V_STU_SSN ); 

    ELSIF(ISNULL_STU_SSN=1 AND ISNULL_DROP_STU_ID=1)-- 탈퇴했다가 1년 지나기 전 다시가입
        THEN  --탈퇴한 회원이 재가입할때 DROPSTUDENT에서 레코드를 지우는 과정
            SELECT STU_ID INTO V_DROP_STU_ID FROM STUDENT WHERE STU_SSN=V_STU_SSN;     -- 주민번호로 STUDENT에서 STU_ID를 뽑아내고
            SELECT STU_ID INTO V_DROP_STU_ID2 FROM DROPSTUDENT WHERE STU_ID=V_DROP_STU_ID; -- STU_ID가 DROPSTUDENT에 있으면(탈퇴한 회원이면) STU_ID를 V_DROP_STU_ID2에 담는다
            
                IF(V_DROP_STU_ID=V_DROP_STU_ID2)    -- STUDENT 테이블 STU_ID = DROPSTUDENT 테이블 STU_ID 이면
                    THEN V_DROP_STU_ID3 := V_DROP_STU_ID;   --정보를 V_DROP_STU_ID3에 담는다
                END IF;
         
            DELETE
            FROM DROPSTUDENT
            WHERE STU_ID=V_DROP_STU_ID3;    --V_DROP_STU_ID3이 존재한다면 DROPSTUDENT 테이블에서 정보를 삭제하고
            
            UPDATE STUDENT
            SET STU_NAME =V_STU_NAME, STU_TEL=V_STU_TEL
            WHERE STU_ID=V_DROP_STU_ID3;    --V_DROP_STU_ID3이 존재한다면 주민번호와 STU_ID를 제외한 STUDENT의 정보 입력값으로 수정

    ELSIF(ISNULL_STU_SSN=1 AND ISNULL_DROP_STU_ID=0) -- 이미 가입된 얘가 재가입하려고 함
        THEN RAISE REENTRANCE_ERROR;
    END IF;
    
    COMMIT;
    
    --예외처리
    EXCEPTION
        WHEN NUM_OVER_ERROR
            THEN RAISE_APPLICATION_ERROR(-20000, '입력가능한 숫자범위를 넘어섰습니다. DB관리자를 호출하세요');
                 ROLLBACK;
        WHEN REENTRANCE_ERROR
            THEN RAISE_APPLICATION_ERROR(-20004, '이미 가입한 정보가 존재합니다');
        WHEN OTHERS
            THEN ROLLBACK;
END;
-> 수정 쿼리문
UPDATE STUDENT
SET STU_NAME = '이일일', STU_SSN='123456-1111111',STU_TEL='010-0101-0101'
WHERE STU_ID = 'S19_001';

UPDATE STUDENT
SET STU_NAME = '이이이', STU_SSN='123456-2222222',STU_TEL='010-0202-0202'
WHERE STU_ID = 'S19_002';

UPDATE STUDENT
SET STU_NAME = '이삼삼', STU_SSN='123456-1333333',STU_TEL='010-0303-0303'
WHERE STU_ID = 'S19_003';

UPDATE STUDENT
SET STU_NAME = '이사사', STU_SSN='123456-2444444',STU_TEL='010-0404-0404'
WHERE STU_ID = 'S19_004';

UPDATE STUDENT
SET STU_NAME = '이오오', STU_SSN='123456-1555555',STU_TEL='010-0505-0505'
WHERE STU_ID = 'S19_005';

->학생 삭제
-- DROP_STU_ID 삭제 시퀀스
CREATE SEQUENCE SEQ_DROPSTU -- 시퀀스 생성 기본 구문(MSSQL의 IDENTITY와 동일한 개념)
START WITH 1              -- 시작값
INCREMENT BY 1            -- 증가값
NOMAXVALUE                -- 최대값 제한 없음
NOCACHE;                  -- 캐시 사용 안함(없음)

-- 삭제 프로시저
CREATE OR REPLACE PROCEDURE PRC_DROPSTU_INSERT
( V_STU_ID      IN STUDENT.STU_ID%TYPE
, V_DROP_REASON IN DROPSTUDENT.DROP_REASON%TYPE)
IS  
    V_OC_END   OPENCOURSE.OC_END%TYPE;
    V_OC_START OPENCOURSE.OC_START%TYPE;
    OPENCOURSING_STU_DROP_ERROR   EXCEPTION;
    V_OC_ID     REGISTER.OC_ID%TYPE;
    ISNULL_STU_ID   NUMBER(1);
BEGIN

    SELECT NVL2(MAX(STU_ID), 1, 0) INTO ISNULL_STU_ID
    FROM REGISTER
    WHERE STU_ID = V_STU_ID;
    
    IF(ISNULL_STU_ID=0)
        THEN INSERT INTO DROPSTUDENT(STU_ID, DROP_REASON, DROP_STU_ID)
             VALUES(V_STU_ID, V_DROP_REASON, SEQ_DROPSTU.NEXTVAL);
    ELSIF(ISNULL_STU_ID=1)
        THEN SELECT OC_ID INTO V_OC_ID FROM REGISTER WHERE STU_ID=V_STU_ID;
             SELECT OC_END INTO V_OC_END FROM OPENCOURSE WHERE OC_ID=V_OC_ID;
             SELECT OC_START INTO V_OC_START FROM OPENCOURSE WHERE OC_ID=V_OC_ID;
             
             
             IF (V_OC_START<=SYSDATE AND SYSDATE<=V_OC_END)
                THEN RAISE OPENCOURSING_STU_DROP_ERROR;
             ELSE INSERT INTO DROPSTUDENT(STU_ID, DROP_REASON, DROP_STU_ID)
                  VALUES(V_STU_ID, V_DROP_REASON, SEQ_DROPSTU.NEXTVAL);
             END IF;
             
   END IF;
   
   COMMIT;
        
     EXCEPTION
        WHEN OPENCOURSING_STU_DROP_ERROR
            THEN RAISE_APPLICATION_ERROR(-20003, '수강중인 학생은 삭제할 수 없습니다');
                 ROLLBACK;
        WHEN OTHERS
            THEN ROLLBACK;    
END;



------------테스트 데이터
EXEC PRC_DROPSTU_INSERT('S19_001','이유테스트1');

EXEC PRC_DROPSTU_INSERT('S19_002','이유테스트2');

EXEC PRC_DROPSTU_INSERT('S19_003','이유테스트3');

-- 세가지경우로 테스트가능
-- 1. STU_ID는 등록 했으나 REGISTER에 수강신청하지 않은 학생 → 삭제됨
--2. STU_ID를 등록했고 REGISTER에 수강신청한 학생
      2.1 수강중인학생 → 삭제되지 않음(에러)
      2.2 수강중이지 않은 학생 → 삭제됨


->학생 삭제 쿼리문
DELETE
FROM DROPSTUDENT
WHERE MONTHS_BETWEEN(SYSDATE, DROP_DATE) > 12;


CREATE OR REPLACE PROCEDURE PRC_REGISTER_INSERT
(V_STU_ID   IN STUDENT.STU_ID%TYPE
,V_OC_ID    IN OPENCOURSE.OC_ID%TYPE)
IS
 V_REG_ID       REGISTER.REG_ID%TYPE;
 V_REG_ID_NUM   NUMBER(4);
 V_OC_START     OPENCOURSE.OC_START%TYPE;
 V_CAPACITY     OPENCOURSE.CAPACITY%TYPE;
 V_NOW          OPENCOURSE.CAPACITY%TYPE;
 
 
 OC_START_ERROR EXCEPTION;
 OC_START_ERROR2 EXCEPTION;
BEGIN
    -- 과정에서 시작날짜 가져오기
    SELECT OC_START INTO V_OC_START FROM OPENCOURSE WHERE OC_ID=V_OC_ID;
    
    -- 과정시작하고나서 등록하면 에러
    IF (SYSDATE>=V_OC_START)
        THEN RAISE OC_START_ERROR;
    END IF;
    
    
    SELECT CAPACITY INTO V_CAPACITY FROM OPENCOURSE WHERE OC_ID = V_OC_ID;
    SELECT COUNT(*) INTO V_NOW FROM REGISTER  WHERE OC_ID = V_OC_ID;
    
    
    
    IF (V_CAPACITY <= V_NOW)
        THEN RAISE OC_START_ERROR2;
    END IF;   
    

    -- REG_ID의 숫자부분 만들기
    SELECT NVL(MAX(TO_NUMBER(SUBSTR(REG_ID,6))), 0 ) + 1 INTO V_REG_ID_NUM
    FROM REGISTER;

    -- REG_ID생성
    V_REG_ID := 'RG'||TO_CHAR(SYSDATE,'YY')||'_'||LPAD(TO_CHAR(V_REG_ID_NUM), 4, '0');

    --INSERT하기
    INSERT INTO REGISTER(STU_ID, OC_ID, REG_ID)
    VALUES (V_STU_ID, V_OC_ID, V_REG_ID);
    
    -- 커밋
    COMMIT;
    
    --예외처리
    EXCEPTION
        WHEN OC_START_ERROR
            THEN RAISE_APPLICATION_ERROR(-20002, '과정 시작일이 지난 과정은 수강신청할 수 없습니다');
                 ROLLBACK;
        WHEN OC_START_ERROR2
            THEN RAISE_APPLICATION_ERROR(-200020, '수강인원 초과입니다.');
                 ROLLBACK;
        WHEN OTHERS
            THEN ROLLBACK;
END;


--수강신청이력 삭제
CREATE OR REPLACE PROCEDURE PRC_REGISTER_DELETE
( V_REG_ID     IN REGISTER.REG_ID%TYPE )
IS
 V_OC_ID       REGISTER.OC_ID%TYPE;
 V_OC_START    OPENCOURSE.OC_START%TYPE;
 COURSE_OPEN_ERROR  EXCEPTION;

BEGIN
    SELECT OC_ID INTO V_OC_ID FROM REGISTER WHERE REG_ID=V_REG_ID;
    SELECT OC_START INTO V_OC_START FROM OPENCOURSE WHERE OC_ID = V_OC_ID;

    IF (SYSDATE>=V_OC_START)            -- 강의가 시작되기 전에만 수강신청이력을 삭제할 수 있음
        THEN RAISE COURSE_OPEN_ERROR;
    END IF;

    DELETE
    FROM REGISTER
    WHERE REG_ID = V_REG_ID;

    EXCEPTION
        WHEN COURSE_OPEN_ERROR
            THEN RAISE_APPLICATION_ERROR(-20000, '과정이 이미 시작되었을 경우 수강신청을 삭제할 수 없습니다.');
                ROLLBACK;
        WHEN OTHERS
            THEN ROLLBACK;
END;

EXEC PRC_REGISTER_DELETE(RC19_1112);




















