CREATE OR REPLACE PROCEDURE PRC_REGISTER_INSERT
(V_STU_ID   IN STUDENT.STU_ID%TYPE
,V_OC_ID    IN OPENCOURSE.OC_ID%TYPE)
IS
 V_REG_ID       REGISTER.REG_ID%TYPE;
 V_REG_ID_NUM   NUMBER(4);
 V_OC_START     OPENCOURSE.OC_START%TYPE;
 OC_START_ERROR EXCEPTION;
BEGIN
    -- 과정에서 시작날짜 가져오기
    SELECT OC_START INTO V_OC_START FROM OPENCOURSE WHERE OC_ID=V_OC_ID;
    
    -- 과정시작하고나서 등록하면 에러
    IF (SYSDATE>=V_OC_START)
        THEN RAISE OC_START_ERROR;
    END IF;

    -- REG_ID의 숫자부분 만들기
    SELECT NVL(MAX(TO_NUMBER(SUBSTR(REG_ID,6))), 0 ) + 1 INTO V_REG_ID_NUM
    FROM REGISTER;

    -- REG_ID생성
    V_REG_ID := 'RG'||TO_CHAR(SYSDATE,'YY')||'_'||LPAD(TO_CHAR(V_REG_ID_NUM), 4, '0');

    --INSERT하기
    INSERT INTO REGISTER(STU_ID, OC_ID, REG_ID)
    VALUES (V_STU_ID, V_OC_ID, V_REG_ID);
    
    -- 커밋
    COMMIT;
    
    --예외처리
    EXCEPTION
        WHEN OC_START_ERROR
            THEN RAISE_APPLICATION_ERROR(-20002, '과정 시작일이 지난 과정은 수강신청할 수 없습니다');
                 ROLLBACK;
        WHEN OTHERS
            THEN ROLLBACK;
END;



CREATE OR REPLACE PROCEDURE PRC_DROPSTU_INSERT
( V_STU_ID      IN STUDENT.STU_ID%TYPE
, V_DROP_REASON IN DROPSTUDENT.DROP_REASON%TYPE)
IS  
    V_OC_END   OPENCOURSE.OC_END%TYPE;
    OPENCOURSING_STU_DROP_ERROR   EXCEPTION;
    V_OC_ID     REGISTER.OC_ID%TYPE;
BEGIN
    SELECT OC_ID INTO V_OC_ID FROM REGISTER WHERE STU_ID=V_STU_ID;
    SELECT OC_END INTO V_OC_END FROM OPENCOURSE WHERE OC_ID=V_OC_ID;

    IF (SYSDATE<=V_OC_END)
        THEN RAISE OPENCOURSING_STU_DROP_ERROR;
    END IF;
    
    INSERT INTO DROPSTUDENT(STU_ID, DROP_REASON, DROP_STU_ID)
    VALUES(V_STU_ID, V_DROP_REASON, SEQ_DROPSTU.NEXTVAL);
    
     EXCEPTION
        WHEN OPENCOURSING_STU_DROP_ERROR
            THEN RAISE_APPLICATION_ERROR(-20003, '수강중인 학생은 삭제할 수 없습니다');
                 ROLLBACK;
        WHEN OTHERS
            THEN ROLLBACK;    
END;


CREATE OR REPLACE PROCEDURE PRC_DROPSTU_INSERT
( V_STU_ID      IN STUDENT.STU_ID%TYPE
, V_DROP_REASON IN DROPSTUDENT.DROP_REASON%TYPE)
IS  
    V_OC_END   OPENCOURSE.OC_END%TYPE;
    OPENCOURSING_STU_DROP_ERROR   EXCEPTION;
    V_OC_ID     REGISTER.OC_ID%TYPE;
BEGIN
    SELECT OC_ID INTO V_OC_ID FROM REGISTER WHERE STU_ID=V_STU_ID;
    SELECT OC_END INTO V_OC_END FROM OPENCOURSE WHERE OC_ID=V_OC_ID;

    IF (SYSDATE<=V_OC_END)
        THEN RAISE OPENCOURSING_STU_DROP_ERROR;
    END IF;
    
    INSERT INTO DROPSTUDENT(STU_ID, DROP_REASON, DROP_STU_ID)
    VALUES(V_STU_ID, V_DROP_REASON, SEQ_DROPSTU.NEXTVAL);
    
     EXCEPTION
        WHEN OPENCOURSING_STU_DROP_ERROR
            THEN RAISE_APPLICATION_ERROR(-20003, '수강중인 학생은 삭제할 수 없습니다');
                 ROLLBACK;
        WHEN OTHERS
            THEN ROLLBACK;    
END;


CREATE OR REPLACE PROCEDURE PRC_DROPSTU_INSERT
( V_STU_ID      IN STUDENT.STU_ID%TYPE
, V_DROP_REASON IN DROPSTUDENT.DROP_REASON%TYPE)
IS  
    V_OC_END   OPENCOURSE.OC_END%TYPE;
    OPENCOURSING_STU_DROP_ERROR   EXCEPTION;
    V_OC_ID     OPENCOURSE.OC_ID%TYPE;
BEGIN
        
    INSERT INTO DROPSTUDENT(STU_ID, DROP_REASON, DROP_STU_ID)
    VALUES(V_STU_ID, V_DROP_REASON, SEQ_DROPSTU.NEXTVAL);
    
    
END;


CREATE OR REPLACE PROCEDURE PRC_STUDENT_INSERT
( V_STU_NAME    IN STUDENT.STU_NAME%TYPE
, V_STU_SSN     IN STUDENT.STU_SSN%TYPE
, V_STU_TEL     IN STUDENT.STU_TEL%TYPE
)
IS
    V_STU_ID        STUDENT.STU_ID%TYPE;
    V_STU_ID_NUM    NUMBER(3);
    NUM_OVER_ERROR  EXCEPTION;
    V_DROP_STU_ID  STUDENT.STU_ID%TYPE;
    V_DROP_STU_ID2 STUDENT.STU_ID%TYPE;
    V_DROP_STU_ID3 STUDENT.STU_ID%TYPE;
BEGIN    
    IF (V_STU_ID_NUM > 999)         ---ID숫자가 999이상이 되면 에러
        THEN RAISE NUM_OVER_ERROR;
    END IF;
    
    --탈퇴한 회원이 재가입할때 DROPSTUDENT에서 레코드를 지우는 과정
    SELECT STU_ID INTO V_DROP_STU_ID FROM STUDENT WHERE STU_SSN=V_STU_SSN;     -- 주민번호로 STUDENT에서 STU_ID를 뽑아내고
    SELECT STU_ID INTO V_DROP_STU_ID2 FROM DROPSTUDENT WHERE STU_ID=V_DROP_STU_ID; -- STU_ID가 DROPSTUDENT에 있으면(탈퇴한 회원이면) STU_ID를 V_DROP_STU_ID2에 담는다
    
    IF(V_DROP_STU_ID=V_DROP_STU_ID2)    -- STUDENT 테이블 STU_ID = DROPSTUDENT 테이블 STU_ID 이면
        THEN V_DROP_STU_ID3 := V_DROP_STU_ID;   --정보를 V_DROP_STU_ID3에 담는다
    END IF;
 
    DELETE
    FROM DROPSTUDENT
    WHERE STU_ID=V_DROP_STU_ID3;    --V_DROP_STU_ID3이 존재한다면 DROPSTUDENT 테이블에서 정보를 삭제하고
    
    UPDATE STUDENT
    SET STU_NAME =V_STU_NAME, STU_TEL=V_STU_TEL
    WHERE STU_ID=V_DROP_STU_ID3;    --V_DROP_STU_ID3이 존재한다면 주민번호와 STU_ID를 제외한 STUDENT의 정보 입력값으로 수정
    
    
    -- ID숫자부분 붙이기
    SELECT NVL(MAX(TO_NUMBER(SUBSTR(STU_ID,5))), 0 ) + 1 INTO V_STU_ID_NUM
    FROM STUDENT;
    
    V_STU_ID := 'S'||TO_CHAR(SYSDATE,'YY')||'_'||LPAD(TO_CHAR(V_STU_ID_NUM), 3, '0');
    
    --새 정보 INSERT하기
    INSERT INTO STUDENT(STU_ID, STU_NAME, STU_SSN, STU_TEL)
    SELECT V_STU_ID, V_STU_NAME, V_STU_SSN, V_STU_TEL
    FROM DUAL
    WHERE NOT EXISTS (SELECT * FROM STUDENT WHERE STU_SSN=V_STU_SSN ); -- 단, 기존데이터중에 주민번호가겹치면 INSERT되지않음

    --커밋
    COMMIT;    
  
    --예외처리  
    EXCEPTION
        WHEN NUM_OVER_ERROR
            THEN RAISE_APPLICATION_ERROR(-20000, '입력가능한 숫자범위를 넘어섰습니다. DB관리자를 호출하세요');
                 ROLLBACK;
        WHEN OTHERS
            THEN ROLLBACK;
END;


----------이전 PRC_STUDENT_INSERT
CREATE OR REPLACE PROCEDURE PRC_STUDENT_INSERT
( V_STU_NAME    IN STUDENT.STU_NAME%TYPE
, V_STU_SSN     IN STUDENT.STU_SSN%TYPE
, V_STU_TEL     IN STUDENT.STU_TEL%TYPE
)
IS
    V_STU_ID        STUDENT.STU_ID%TYPE;
    V_STU_ID_NUM    NUMBER(3);
    NUM_OVER_ERROR  EXCEPTION;
    V_OVERLAP       STUDENT.STU_ID%TYPE;
    OVERLAP_ERROR   EXCEPTION;

BEGIN    
    IF (V_STU_ID_NUM > 999)
        THEN RAISE NUM_OVER_ERROR;
    END IF;
    
    SELECT NVL(MAX(TO_NUMBER(SUBSTR(STU_ID,5))), 0 ) + 1 INTO V_STU_ID_NUM
    FROM STUDENT;
    
    V_STU_ID := 'S'||TO_CHAR(SYSDATE,'YY')||'_'||LPAD(TO_CHAR(V_STU_ID_NUM), 3, '0');
    
    INSERT INTO STUDENT(STU_ID, STU_NAME, STU_SSN, STU_TEL)
    SELECT V_STU_ID, V_STU_NAME, V_STU_SSN, V_STU_TEL
    FROM DUAL
    WHERE NOT EXISTS (SELECT * FROM STUDENT WHERE STU_SSN=V_STU_SSN );

    COMMIT;    
    
    EXCEPTION
        WHEN NUM_OVER_ERROR
            THEN RAISE_APPLICATION_ERROR(-20000, '입력가능한 숫자범위를 넘어섰습니다. DB관리자를 호출하세요');
                 ROLLBACK;
        WHEN OTHERS
            THEN ROLLBACK;
END;

SELECT *
FROM REGISTER;


-- 삭제 프로시저 수정

-- DROP_STU_ID 삭제 시퀀스
CREATE SEQUENCE SEQ_DROPSTU -- 시퀀스 생성 기본 구문(MSSQL의 IDENTITY와 동일한 개념)
START WITH 1              -- 시작값
INCREMENT BY 1            -- 증가값
NOMAXVALUE                -- 최대값 제한 없음
NOCACHE;                  -- 캐시 사용 안함(없음)

--삭제 프로시저
CREATE OR REPLACE PROCEDURE PRC_DROPSTU_INSERT
( V_STU_ID      IN STUDENT.STU_ID%TYPE
, V_DROP_REASON IN DROPSTUDENT.DROP_REASON%TYPE)
IS  
    V_OC_END   OPENCOURSE.OC_END%TYPE;
    OPENCOURSING_STU_DROP_ERROR   EXCEPTION;
    V_OC_ID     REGISTER.OC_ID%TYPE;
    ISNULL_STU_ID   NUMBER(1);
BEGIN

    SELECT NVL2(MAX(STU_ID), 1, 0), NVL2(MAX(V_OC_END), 1, 0) INTO ISNULL_STU_ID, ISNULL_OC_END
    FROM REGISTER REG JOIN OPENCOURSE OC
                  ON REGISTER.OC_ID = OPENCOURSE.OC_ID
    WHERE STU_ID = V_STU_ID;
    
    IF(ISNULL_STU_ID=0)
        THEN INSERT INTO DROPSTUDENT(STU_ID, DROP_REASON, DROP_STU_ID)
             VALUES(V_STU_ID, V_DROP_REASON, SEQ_DROPSTU.NEXTVAL);
    ELSIF(ISNULL_STU_ID=1 AND SYSDATE<=V_OC_END)
        THEN RAISE OPENCOURSING_STU_DROP_ERROR;
    ELSIF(ISNULL_STU_ID=1)
        THEN SELECT OC_ID INTO V_OC_ID FROM REGISTER WHERE STU_ID=V_STU_ID;
             SELECT OC_END INTO V_OC_END FROM OPENCOURSE WHERE OC_ID=V_OC_ID; 
             INSERT INTO DROPSTUDENT(STU_ID, DROP_REASON, DROP_STU_ID)
             VALUES(V_STU_ID, V_DROP_REASON, SEQ_DROPSTU.NEXTVAL);
    ELSE INSERT INTO DROPSTUDENT(STU_ID, DROP_REASON, DROP_STU_ID)
         VALUES(V_STU_ID, V_DROP_REASON, SEQ_DROPSTU.NEXTVAL);
    END IF;
        
     /*EXCEPTION
        WHEN OPENCOURSING_STU_DROP_ERROR
            THEN RAISE_APPLICATION_ERROR(-20003, '수강중인 학생은 삭제할 수 없습니다');
                 ROLLBACK;
        WHEN OTHERS
            THEN ROLLBACK;    */
END;


---가입 프로시저 기승이 힌트
-- 1. STUDENT에 없는 얘가 가입 -> 진짜 신규가입
-- 2. STUDENT에 있고 DROPSTUDENT에도 있는 얘 가입 -> 탈퇴 했다가 1년 안됐지만 다시 가입
-- 3. STUDENT에 있고 DROPSTUDENT에는 없음 -> 이미 가입된 얘가 재 가입하려고 함
CREATE OR REPLACE PROCEDURE PRC_STUDENT_INSERT
( V_STU_NAME    IN  STUDENT.STU_NAME%TYPE
, V_STU_SSN     IN  STUDENT.STU_SSN%TYPE
, V_STU_TEL     IN  STUDENT.STU_TEL%TYPE
)
IS
    V_STU_ID            STUDENT.STU_ID%TYPE;
    ISNULL_STU_SSN      NUMBER(1);
    ISNULL_DROP_STU_ID  NUMBER(1);
BEGIN
    SELECT NVL2(MAX(STU_SSN), 1, 0), MAX(STU_ID) INTO ISNULL_STU_SSN, V_STU_ID
    FROM STUDENT
    WHERE STU_SSN = V_STU_SSN;
    
    SELECT NVL2(MAX(DROP_STU_ID), 1, 0) INTO ISNULL_DROP_STU_ID
    FROM DROPSTUDENT
    WHERE STU_ID = V_STU_ID;
    
    IF(ISNULL_STU_SSN=0)
        THEN DBMS_OUTPUT.PUT_LINE('신규가입'); -- 신규가입
    ELSIF(ISNULL_STU_SSN=1 AND ISNULL_DROP_STU_ID=1)
        THEN DBMS_OUTPUT.PUT_LINE('탈퇴했다가 1년 지나기 전 다시가입'); -- 탈퇴했다가 1년 지나기 전 다시가입
    ELSIF(ISNULL_STU_SSN=1 AND ISNULL_DROP_STU_ID=0)
        THEN DBMS_OUTPUT.PUT_LINE('이미 가입된 얘가 재가입하려고 함'); -- 이미 가입된 얘가 재가입하려고 함
    END IF;
    
END;


--가입프로시저 수정
CREATE OR REPLACE PROCEDURE PRC_STUDENT_INSERT
( V_STU_NAME    IN  STUDENT.STU_NAME%TYPE
, V_STU_SSN     IN  STUDENT.STU_SSN%TYPE
, V_STU_TEL     IN  STUDENT.STU_TEL%TYPE
)
IS
    V_STU_ID            STUDENT.STU_ID%TYPE;
    V_STU_ID_NUM        NUMBER(3);
    ISNULL_STU_SSN      NUMBER(1);
    ISNULL_DROP_STU_ID  NUMBER(1);
    REENTRANCE_ERROR    EXCEPTION;
    NUM_OVER_ERROR  EXCEPTION;
    V_DROP_STU_ID  STUDENT.STU_ID%TYPE;
    V_DROP_STU_ID2 STUDENT.STU_ID%TYPE;
    V_DROP_STU_ID3 STUDENT.STU_ID%TYPE;

BEGIN
     IF (V_STU_ID_NUM > 999)         ---ID숫자가 999이상이 되면 에러
        THEN RAISE NUM_OVER_ERROR;
    END IF;

    SELECT NVL2(MAX(STU_SSN), 1, 0), MAX(STU_ID) INTO ISNULL_STU_SSN, V_STU_ID
    FROM STUDENT
    WHERE STU_SSN = V_STU_SSN;
    
    SELECT NVL2(MAX(DROP_STU_ID), 1, 0) INTO ISNULL_DROP_STU_ID
    FROM DROPSTUDENT
    WHERE STU_ID = V_STU_ID;
    
    IF(ISNULL_STU_SSN=0) -- 신규가입
        THEN -- ID숫자부분 붙이기
            SELECT NVL(MAX(TO_NUMBER(SUBSTR(STU_ID,5))), 0 ) + 1 INTO V_STU_ID_NUM
            FROM STUDENT;
            V_STU_ID := 'S'||TO_CHAR(SYSDATE,'YY')||'_'||LPAD(TO_CHAR(V_STU_ID_NUM), 3, '0');
        
            --새 정보 INSERT하기
            INSERT INTO STUDENT(STU_ID, STU_NAME, STU_SSN, STU_TEL)
            SELECT V_STU_ID, V_STU_NAME, V_STU_SSN, V_STU_TEL
            FROM DUAL
            WHERE NOT EXISTS (SELECT * FROM STUDENT WHERE STU_SSN=V_STU_SSN ); 

    ELSIF(ISNULL_STU_SSN=1 AND ISNULL_DROP_STU_ID=1)-- 탈퇴했다가 1년 지나기 전 다시가입
        THEN  --탈퇴한 회원이 재가입할때 DROPSTUDENT에서 레코드를 지우는 과정
            SELECT STU_ID INTO V_DROP_STU_ID FROM STUDENT WHERE STU_SSN=V_STU_SSN;     -- 주민번호로 STUDENT에서 STU_ID를 뽑아내고
            SELECT STU_ID INTO V_DROP_STU_ID2 FROM DROPSTUDENT WHERE STU_ID=V_DROP_STU_ID; -- DROPSTUDENT에 있는(탈퇴한 회원목록) STU_ID를 V_DROP_STU_ID2에 담는다
            
                IF(V_DROP_STU_ID=V_DROP_STU_ID2)    -- STUDENT 테이블 STU_ID = DROPSTUDENT 테이블 STU_ID 이면
                    THEN V_DROP_STU_ID3 := V_DROP_STU_ID;   --정보를 V_DROP_STU_ID3에 담는다
                END IF;
         
            DELETE
            FROM DROPSTUDENT
            WHERE STU_ID=V_DROP_STU_ID3;    --V_DROP_STU_ID3이 존재한다면 DROPSTUDENT 테이블에서 정보를 삭제하고
            
            UPDATE STUDENT
            SET STU_NAME =V_STU_NAME, STU_TEL=V_STU_TEL
            WHERE STU_ID=V_DROP_STU_ID3;    --V_DROP_STU_ID3이 존재한다면 주민번호와 STU_ID를 제외한 STUDENT의 정보 입력값으로 수정

    ELSIF(ISNULL_STU_SSN=1 AND ISNULL_DROP_STU_ID=0) -- 이미 가입된 얘가 재가입하려고 함
        THEN RAISE REENTRANCE_ERROR;
    END IF;
    
    COMMIT;
    
    --예외처리
    EXCEPTION
        WHEN NUM_OVER_ERROR
            THEN RAISE_APPLICATION_ERROR(-20000, '입력가능한 숫자범위를 넘어섰습니다. DB관리자를 호출하세요');
                 ROLLBACK;
        WHEN REENTRANCE_ERROR
            THEN RAISE_APPLICATION_ERROR(-20004, '이미 가입한 정보가 존재합니다');
        WHEN OTHERS
            THEN ROLLBACK;
END;

--가입 프로시저 수정2
CREATE OR REPLACE PROCEDURE PRC_STUDENT_INSERT
( V_STU_NAME    IN  STUDENT.STU_NAME%TYPE
, V_STU_SSN     IN  STUDENT.STU_SSN%TYPE
, V_STU_TEL     IN  STUDENT.STU_TEL%TYPE
)
IS
    V_STU_ID            STUDENT.STU_ID%TYPE;
    V_STU_ID_NUM        NUMBER(3);
    ISNULL_STU_SSN      NUMBER(1);
    ISNULL_DROP_STU_ID  NUMBER(1);
    REENTRANCE_ERROR    EXCEPTION;
    NUM_OVER_ERROR  EXCEPTION;
    V_DROP_STU_ID  STUDENT.STU_ID%TYPE;
    V_DROP_STU_ID2 STUDENT.STU_ID%TYPE;
    V_DROP_STU_ID3 STUDENT.STU_ID%TYPE;

BEGIN
     IF (V_STU_ID_NUM > 999)         ---ID숫자가 999이상이 되면 에러
        THEN RAISE NUM_OVER_ERROR;
    END IF;

    SELECT NVL2(MAX(STU_SSN), 1, 0), MAX(STU_ID) INTO ISNULL_STU_SSN, V_STU_ID
    FROM STUDENT
    WHERE STU_SSN = V_STU_SSN;
    
    SELECT NVL2(MAX(DROP_STU_ID), 1, 0) INTO ISNULL_DROP_STU_ID
    FROM DROPSTUDENT
    WHERE STU_ID = V_STU_ID;
    
    IF(ISNULL_STU_SSN=0) -- 신규가입
        THEN -- ID숫자부분 붙이기
            SELECT NVL(MAX(TO_NUMBER(SUBSTR(STU_ID,5))), 0 ) + 1 INTO V_STU_ID_NUM
            FROM STUDENT;
            V_STU_ID := 'S'||TO_CHAR(SYSDATE,'YY')||'_'||LPAD(TO_CHAR(V_STU_ID_NUM), 3, '0');
        
            --새 정보 INSERT하기
            INSERT INTO STUDENT(STU_ID, STU_NAME, STU_SSN, STU_TEL)
            SELECT V_STU_ID, V_STU_NAME, V_STU_SSN, V_STU_TEL
            FROM DUAL
            WHERE NOT EXISTS (SELECT * FROM STUDENT WHERE STU_SSN=V_STU_SSN ); 

    ELSIF(ISNULL_STU_SSN=1)-- 탈퇴했다가 1년 지나기 전 다시가입
        THEN 
            IF (ISNULL_DROP_STU_ID=1)
                THEN --탈퇴한 회원이 재가입할때 DROPSTUDENT에서 레코드를 지우는 과정
                    SELECT STU_ID INTO V_DROP_STU_ID FROM STUDENT WHERE STU_SSN=V_STU_SSN;     -- 주민번호로 STUDENT에서 STU_ID를 뽑아내고
                    SELECT STU_ID INTO V_DROP_STU_ID2 FROM DROPSTUDENT WHERE STU_ID=V_DROP_STU_ID; -- STU_ID가 DROPSTUDENT에 있으면(탈퇴한 회원이면) STU_ID를 V_DROP_STU_ID2에 담는다
                    
                        IF(V_DROP_STU_ID=V_DROP_STU_ID2)    -- STUDENT 테이블 STU_ID = DROPSTUDENT 테이블 STU_ID 이면
                            THEN V_DROP_STU_ID3 := V_DROP_STU_ID;   --정보를 V_DROP_STU_ID3에 담는다
                        END IF;
                 
                    DELETE
                    FROM DROPSTUDENT
                    WHERE STU_ID=V_DROP_STU_ID3;    --V_DROP_STU_ID3이 존재한다면 DROPSTUDENT 테이블에서 정보를 삭제하고
                    
                    UPDATE STUDENT
                    SET STU_NAME =V_STU_NAME, STU_TEL=V_STU_TEL
                    WHERE STU_ID=V_DROP_STU_ID3;    --V_DROP_STU_ID3이 존재한다면 주민번호와 STU_ID를 제외한 STUDENT의 정보 입력값으로 수정
            ELSE IF (ISNULL_DROP_STU_ID=0) -- 이미 가입된 얘가 재가입하려고 함
                THEN RAISE REENTRANCE_ERROR;
            END IF;
    END IF;
    
    COMMIT;
    
    --예외처리
    EXCEPTION
        WHEN NUM_OVER_ERROR
            THEN RAISE_APPLICATION_ERROR(-20000, '입력가능한 숫자범위를 넘어섰습니다. DB관리자를 호출하세요');
                 ROLLBACK;
        WHEN REENTRANCE_ERROR
            THEN RAISE_APPLICATION_ERROR(-20004, '이미 가입한 정보가 존재합니다');
                ROLLBA
        WHEN OTHERS
            THEN ROLLBACK;
END;




CREATE OR REPLACE PROCEDURE PRC_DROPSTU_INSERT
( V_STU_ID      IN STUDENT.STU_ID%TYPE
, V_DROP_REASON IN DROPSTUDENT.DROP_REASON%TYPE)
IS  
    V_OC_END   OPENCOURSE.OC_END%TYPE;
    V_OC_START OPENCOURSE.OC_START%TYPE;
    OPENCOURSING_STU_DROP_ERROR   EXCEPTION;
    V_OC_ID     REGISTER.OC_ID%TYPE;
    ISNULL_STU_ID   NUMBER(1);
BEGIN

    SELECT NVL2(MAX(STU_ID), 1, 0) INTO ISNULL_STU_ID
    FROM REGISTER
    WHERE STU_ID = V_STU_ID;
    
    IF(ISNULL_STU_ID=0)
        THEN INSERT INTO DROPSTUDENT(STU_ID, DROP_REASON, DROP_STU_ID)
             VALUES(V_STU_ID, V_DROP_REASON, SEQ_DROPSTU.NEXTVAL);
    ELSIF(ISNULL_STU_ID=1)
        THEN SELECT OC_ID INTO V_OC_ID FROM REGISTER WHERE STU_ID=V_STU_ID;
             SELECT OC_END INTO V_OC_END FROM OPENCOURSE WHERE OC_ID=V_OC_ID;
             SELECT OC_START INTO V_OC_START FROM OPENCOURSE WHERE OC_ID=V_OC_ID;
             
             
             IF (V_OC_START<=SYSDATE AND SYSDATE<=V_OC_END)
                THEN RAISE OPENCOURSING_STU_DROP_ERROR;
             ELSE INSERT INTO DROPSTUDENT(STU_ID, DROP_REASON, DROP_STU_ID)
                  VALUES(V_STU_ID, V_DROP_REASON, SEQ_DROPSTU.NEXTVAL);
             END IF;
             
   END IF;
   
   COMMIT;
        
     EXCEPTION
        WHEN OPENCOURSING_STU_DROP_ERROR
            THEN RAISE_APPLICATION_ERROR(-20003, '수강중인 학생은 삭제할 수 없습니다');
                 ROLLBACK;
        WHEN OTHERS
            THEN ROLLBACK;    
END;