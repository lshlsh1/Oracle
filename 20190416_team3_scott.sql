--■■■ 테이블 생성 ■■■--
--○ STUDENT 테이블
CREATE TABLE STUDENT
( STU_ID    VARCHAR2(10)    
, STU_NAME  VARCHAR2(20)
, STU_SSN   VARCHAR2(14)
, STU_TEL   VARCHAR2(13)
);
--==>> Table STUDENT이(가) 생성되었습니다.

--○ ADMIN 테이블
CREATE TABLE ADMIN
( ADM_ID    VARCHAR2(10)
, ADM_PW    VARCHAR2(10)
);
--==>> Table ADMIN이(가) 생성되었습니다.

--○ PROFESSOR 테이블
CREATE TABLE PROFESSOR
( PRO_ID    VARCHAR(10)    -- 교수ID 
, PRO_NAME  VARCHAR2(20)  -- 교수자명
, PRO_SSN   VARCHAR2(14)  -- 주민번호
, PRO_TEL   VARCHAR2(13)    -- 전화번호
);
--==>> Table PROFESSOR이(가) 생성되었습니다.

--○ CLASSROOM 테이블
CREATE TABLE CLASSROOM      -- 강의실TABLE
( CR_ID     VARCHAR2(10)     -- 강의실코드
, CR_NAME   VARCHAR2(20)    -- 강의실명
);
--==>>Table CLASSROOM이(가) 생성되었습니다.

--○ BOOK 테이블
CREATE TABLE BOOK
( BK_ID     VARCHAR2(10)     -- 교재코드
, BK_NAME   VARCHAR2(20)    -- 교재명
);
--==>> Table BOOK이(가) 생성되었습니다.

--○ COURSE 테이블
CREATE TABLE COURSE         -- 과정TABLE
( CS_ID     VARCHAR2(10)     -- 과정코드
, CS_NAME   VARCHAR2(20)     -- 과정명
);
--==>>Table COURSE이(가) 생성되었습니다.

--○ SUBJECT 테이블
CREATE TABLE SUBJECT
( SUB_ID    VARCHAR2(10)     -- 과목코드
, SUB_NAME  VARCHAR2(20)    -- 과목명
);
--==>> Table SUBJECT이(가) 생성되었습니다.

--○ DROPSTUDENT 테이블
CREATE TABLE DROPSTUDENT
( STU_ID        VARCHAR2(10)
, DROP_REASON   VARCHAR2(20)
, DROP_DATE     DATE	DEFAULT SYSDATE
, DROP_STU_ID   VARCHAR2(10)
);
--==>> Table DROPSTUDENT이(가) 생성되었습니다.

--○ OPENCOURSE 테이블
CREATE TABLE OPENCOURSE     -- 개설과정TABLE
( CS_ID     VARCHAR2(10)     -- 과정코드
, OC_ID     VARCHAR2(10)     -- 개설과정코드
, CR_ID     VARCHAR2(10)     -- 강의실코드
, OC_START  DATE            -- 과정시작
, OC_END    DATE            -- 과정끝
, CAPACITY  NUMBER(2)       -- 수강정원
);

--○ REGISTER 테이블
CREATE TABLE REGISTER
( STU_ID    VARCHAR2(10)
, OC_ID     VARCHAR2(10)
, REG_ID    VARCHAR2(10)
, REG_DATE  DATE    DEFAULT SYSDATE
);
--==>> Table REGISTER이(가) 생성되었습니다.

--○ OPENSUBJECT 테이블
CREATE TABLE OPENSUBJECT
( OC_ID     VARCHAR2(10)     -- 개설과정코드
, OS_ID     VARCHAR2(10)     -- 개설과모코드
, PRO_ID    VARCHAR2(10)     -- 교수ID
, BK_ID     VARCHAR2(10)     -- 교재코드
, SUB_ID    VARCHAR2(10)     -- 과목코드
, OS_START  DATE            -- 과목시작
, OS_END    DATE            -- 과목끝
);
--==>> Table OPENSUBJECT이(가) 생성되었습니다.

--○ DROPPROFESSOR 테이블
CREATE TABLE DROPPROFESSOR
( PRO_ID        VARCHAR2(10)  -- 교수ID
, DROP_REASON   VARCHAR2(20)  -- 탈퇴사유
, DROP_DATE     DATE  DEFAULT SYSDATE       -- 탈퇴일자
, DROP_PRO_ID   VARCHAR2(10)  -- 탈퇴코드
);
--==>> Table DROPPROFESSOR이(가) 생성되었습니다.

--○ GIVEUP 테이블
CREATE TABLE GIVEUP
( REG_ID    VARCHAR2(10)
, GU_DATE   DATE DEFAULT SYSDATE
, GU_ID     VARCHAR2(10)
);
--==>> Table GIVEUP이(가) 생성되었습니다.

--○ SCORE 테이블
CREATE TABLE SCORE
( OS_ID         VARCHAR2(10)
, REG_ID        VARCHAR2(10)
, ATTENDANCE    NUMBER(3)
, PERFORMANCE   NUMBER(3)
, WRITTEN       NUMBER(3)
, SC_ID         VARCHAR2(10)
);
--==>>Table SCORE이(가) 생성되었습니다.

--○ RATIO 테이블
CREATE TABLE RATIO
( RATIO_ID      VARCHAR2(10)  -- 배점코드
, OS_ID         VARCHAR2(10)  -- 개설과목코드
, ATTENDANCE    NUMBER(3)    -- 출결 
, PERFORMANCE   NUMBER(3)    -- 실기
, WRITTEN       NUMBER(3)    -- 필기
);
--==>> Table RATIO이(가) 생성되었습니다.


--○ 제약조건 추가
ALTER TABLE STUDENT
ADD ( CONSTRAINT STUDENT_STU_ID_PK PRIMARY KEY(STU_ID)
    , CONSTRAINT STUDENT_STU_NAME_NN CHECK(STU_NAME IS NOT NULL)
    , CONSTRAINT STUDENT_STU_SSN_NN CHECK(STU_SSN IS NOT NULL) );
--==>> Table STUDENT이(가) 변경되었습니다.

ALTER TABLE ADMIN
ADD ( CONSTRAINT ADMIN_ADM_ID_PK PRIMARY KEY(ADM_ID)
    , CONSTRAINT ADMIN_ADM_PW_NN CHECK(ADM_PW IS NOT NULL) );
--==>> Table ADMIN이(가) 변경되었습니다.


ALTER TABLE PROFESSOR
ADD (CONSTRAINT PROFESSOR_PRO_ID_PK PRIMARY KEY(PRO_ID)
   , CONSTRAINT PROFESSOR_PRO_NAME_NN CHECK(PRO_NAME IS NOT NULL)
   , CONSTRAINT PROFESSOR_PRO_SSN_NN CHECK(PRO_SSN IS NOT NULL));
--==>> Table PROFESSOR이(가) 변경되었습니다.


ALTER TABLE CLASSROOM
ADD ( CONSTRAINT CLASSROOM_CR_ID_PK   PRIMARY KEY(CR_ID)
         , CONSTRAINT CLASSROOM_CR_NAME_NN CHECK(CR_NAME IS NOT NULL));
--==>> Table CLASSROOM이(가) 변경되었습니다.

ALTER TABLE BOOK
ADD ( CONSTRAINT BOOK_BK_ID_PK PRIMARY KEY(BK_ID)
         , CONSTRAINT BOOK_BK_NAME_NN CHECK(BK_NAME IS NOT NULL));
--==>> Table BOOK이(가) 변경되었습니다.

ALTER TABLE COURSE
ADD ( CONSTRAINT COURSE_CS_ID_PK   PRIMARY KEY(CS_ID)
         , CONSTRAINT COURSE_CS_ID_NN CHECK(CS_ID IS NOT NULL) );
--==>> Table COURSE이(가) 변경되었습니다.

ALTER TABLE SUBJECT
ADD (CONSTRAINT SUBJECT_SUB_ID_PK PRIMARY KEY(SUB_ID)
   , CONSTRAINT SUBJECT_SUB_NAME_NN CHECK(SUB_NAME IS NOT NULL));
--==>> Table SUBJECT이(가) 변경되었습니다.

ALTER TABLE DROPSTUDENT
ADD ( CONSTRAINT DROPSTUDENT_DROP_STU_ID_PK PRIMARY KEY(DROP_STU_ID)
    , CONSTRAINT DROPSTUDENT_STU_ID_FK FOREIGN KEY(STU_ID) REFERENCES STUDENT(STU_ID)
    , CONSTRAINT DROPSTUDENT_STU_ID_NN CHECK(STU_ID IS NOT NULL)
    , CONSTRAINT DROPSTUDENT_DROP_DATE_NN CHECK(DROP_STU_ID IS NOT NULL) );
--==>> Table DROPSTUDENT이(가) 변경되었습니다.
    
ALTER TABLE OPENCOURSE
ADD ( CONSTRAINT OPENCOURSE_OC_ID_PK   PRIMARY KEY(OC_ID)
    , CONSTRAINT OPENCOURSE_CS_ID_FK    FOREIGN KEY(CS_ID)      REFERENCES COURSE(CS_ID)
    , CONSTRAINT OPENCOURSE_CR_ID_FK    FOREIGN KEY(CR_ID)      REFERENCES CLASSROOM(CR_ID) 
    , CONSTRAINT OPENCOURSE_CS_ID_NN CHECK(CS_ID IS NOT NULL)
    , CONSTRAINT OPENCOURSE_CR_ID_NN CHECK(CR_ID IS NOT NULL)
    , CONSTRAINT OPENCOURSE_OC_START_END_CK CHECK(OC_START<OC_END));
--==>> Table OPENCOURSE이(가) 변경되었습니다.
    
ALTER TABLE REGISTER
ADD (CONSTRAINT REGISTER_REG_ID_PK PRIMARY KEY(REG_ID)
   , CONSTRAINT REGISTER_STU_ID_FK FOREIGN KEY(STU_ID) REFERENCES STUDENT(STU_ID)
   , CONSTRAINT REGISTER_OC_ID_FK FOREIGN KEY(OC_ID) REFERENCES OPENCOURSE(OC_ID)
   , CONSTRAINT REGISTER_STU_ID_NN CHECK(STU_ID IS NOT NULL)
   , CONSTRAINT REGISTER_OC_ID_NN CHECK(OC_ID IS NOT NULL)
   , CONSTRAINT REGISTER_REG_DATE_NN CHECK(REG_DATE IS NOT NULL));
--==>> Table REGISTER이(가) 변경되었습니다.

ALTER TABLE OPENSUBJECT
ADD (CONSTRAINT OPENSUBJECT_OS_ID_PK PRIMARY KEY(OS_ID)
   , CONSTRAINT OPENSUBJECT_OC_ID_FK FOREIGN KEY(OC_ID)    REFERENCES OPENCOURSE(OC_ID)
   , CONSTRAINT OPENSUBJECT_PRO_ID_FK FOREIGN KEY(PRO_ID)  REFERENCES PROFESSOR(PRO_ID)
   , CONSTRAINT OPENSUBJECT_BK_ID_FK FOREIGN KEY(BK_ID)    REFERENCES BOOK(BK_ID)
   , CONSTRAINT OPENSUBJECT_SUB_ID_FK FOREIGN KEY(SUB_ID)  REFERENCES SUBJECT(SUB_ID)
   , CONSTRAINT OPENSUBJECT_OS_ID_NN CHECK(OS_ID IS NOT NULL)
   , CONSTRAINT OPENSUBJECT_PRO_ID_NN CHECK(PRO_ID IS NOT NULL)
   , CONSTRAINT OPENSUBJECT_BK_ID_NN CHECK(BK_ID IS NOT NULL)
   , CONSTRAINT OPENSUBJECT_SUB_ID_NN CHECK(SUB_ID IS NOT NULL)
   , CONSTRAINT OPENSUBJECT_OS_START_END_CK CHECK(OS_START<OS_END));
--==>> Table OPENSUBJECT이(가) 변경되었습니다.
  
ALTER TABLE DROPPROFESSOR
ADD (CONSTRAINT DROPPROFESSOR_DROP_PRO_ID_PK PRIMARY KEY(DROP_PRO_ID)
   , CONSTRAINT DROPPROFESSOR_PRO_ID_FK FOREIGN KEY(PRO_ID) REFERENCES PROFESSOR(PRO_ID)
   , CONSTRAINT DROPPROFESSOR_PRO_ID_NN CHECK(PRO_ID IS NOT NULL)
   , CONSTRAINT DROPPROFESSOR_DROP_DATE_NN CHECK(DROP_DATE IS NOT NULL));
--==>> Table DROPPROFESSOR이(가) 변경되었습니다.

                                  
ALTER TABLE GIVEUP
ADD (CONSTRAINT GIVEUP_GU_ID_PK PRIMARY KEY(GU_ID)
   , CONSTRAINT GIVEUP_REG_ID_FK FOREIGN KEY(REG_ID) REFERENCES REGISTER(REG_ID)
   , CONSTRAINT GIVEUP_REG_ID_NN CHECK(REG_ID IS NOT NULL)
   , CONSTRAINT GIVEUP_GU_DATE_NN CHECK(GU_DATE IS NOT NULL));
--==>> Table GIVEUP이(가) 변경되었습니다.

ALTER TABLE SCORE
ADD (CONSTRAINT SCORE_SC_ID_PK PRIMARY KEY(SC_ID)
   , CONSTRAINT SCORE_REG_ID_FK FOREIGN KEY(REG_ID) REFERENCES REGISTER(REG_ID)
   , CONSTRAINT SCORE_OS_ID_FK FOREIGN KEY(OS_ID) REFERENCES OPENSUBJECT(OS_ID)
   , CONSTRAINT SCORE_OS_ID_NN CHECK(OS_ID IS NOT NULL)
   , CONSTRAINT SCORE_REG_ID_NN CHECK(REG_ID IS NOT NULL));
--==>> Table SCORE이(가) 변경되었습니다.


ALTER TABLE RATIO
ADD (CONSTRAINT RATIO_RATIO_ID_PK PRIMARY KEY(RATIO_ID)
   , CONSTRAINT RATIO_OS_ID_FK FOREIGN KEY(OS_ID) REFERENCES OPENSUBJECT(OS_ID)
   , CONSTRAINT RATIO_OS_ID_NN CHECK(OS_ID IS NOT NULL)
   , CONSTRAINT RATIO_ATTENDANCE_NN CHECK(ATTENDANCE IS NOT NULL)
   , CONSTRAINT RATIO_PERFORMANCE_NN CHECK(PERFORMANCE IS NOT NULL)
   , CONSTRAINT RATIO_WRITTEN_NN CHECK(WRITTEN IS NOT NULL)); 
--==>> Table RATIO이(가) 변경되었습니다.


COMMIT;

EXEC PRC_STUDENTS_INSERT('batnam','java006$','남상현','010-2222-2222','서울');
-- 이와 같은 구문 한 줄로 양쪽 테이블에 데이터를 모두 제대로 입력할 수 있다.

    INSERT INTO STUDENT(STU_ID, STU_NAME, STU_SSN, STU_TEL)
    SELECT (SELECT 'S'||TO_CHAR(SYSDATE,'YY')||'_'||LPAD(TO_CHAR(V_STU_ID_NUM), 3, '0'), V_STU_NAME, V_STU_SSN, V_STU_TEL
    FROM DUAL
    WHERE NOT EXISTS (SELECT * FROM STUDENT WHERE STU_SSN=V_STU_SSN );

    INSERT INTO CLASSROOM(CR_ID, CR_NAME)
    VALUES(( SELECT 'CR' || LPAD(TO_CHAR(NVL(MAX(TO_NUMBER(SUBSTR(CR_ID,3))),0)+1), 3, '0') FROM BOOK ), 'A-강의장');


--입력프로시저
CREATE OR REPLACE PROCEDURE PRC_STU_INSERT
( V_STU_NAME    IN STUDENT.STU_NAME%TYPE
, V_STU_SSN     IN STUDENT.STU_SSN%TYPE
, V_STU_TEL     IN STUDENT.STU_TEL%TYPE
)
IS
    V_STU_ID        STUDENT.STU_ID%TYPE;
    V_STU_ID_NUM    NUMBER(3);
    NUM_OVER_ERROR  EXCEPTION;
    V_OVERLAP       STUDENT.STU_ID%TYPE;
    OVERLAP_ERROR   EXCEPTION;

BEGIN    
    IF (V_STU_ID_NUM > 999)
        THEN RAISE NUM_OVER_ERROR;
    END IF;
    
    SELECT NVL(MAX(TO_NUMBER(SUBSTR(STU_ID,5))), 0 ) + 1 INTO V_STU_ID_NUM
    FROM STUDENT;
    
    V_STU_ID := 'S'||TO_CHAR(SYSDATE,'YY')||'_'||LPAD(TO_CHAR(V_STU_ID_NUM), 3, '0');
    
    INSERT INTO STUDENT(STU_ID, STU_NAME, STU_SSN, STU_TEL)
    SELECT V_STU_ID, V_STU_NAME, V_STU_SSN, V_STU_TEL
    FROM DUAL
    WHERE NOT EXISTS (SELECT * FROM STUDENT WHERE STU_SSN=V_STU_SSN );

    COMMIT;    
    
    EXCEPTION
        WHEN NUM_OVER_ERROR
            THEN RAISE_APPLICATION_ERROR(-20000, '입력가능한 숫자범위를 넘어섰습니다. DB관리자를 호출하세요');
                 ROLLBACK;
        WHEN OTHERS
            THEN ROLLBACK;
END;
--==>>Procedure PRC_STU_INSERT이(가) 컴파일되었습니다.

CREATE OR REPLACE PROCEDURE PRC_STU_UPDATE
(V_STU_ID       IN STUDENT.STU_ID%TYPE
, V_STU_NAME    IN STUDENT.STU_NAME%TYPE
, V_STU_SSN     IN STUDENT.STU_SSN%TYPE
, V_STU_TEL     IN STUDENT.STU_TEL%TYPE
)
IS
BEGIN
 
    UPDATE STUDENT
    SET STU_NAME=V_STU_NAME, STU_SSN=V_STU_SSN, STU_TEL=V_STU_TEL
    WHERE STU_ID = V_STU_ID;
    
END;

CREATE SEQUENCE SEQ_DROPSTU -- 시퀀스 생성 기본 구문(MSSQL의 IDENTITY와 동일한 개념)
START WITH 1              -- 시작값
INCREMENT BY 1            -- 증가값
NOMAXVALUE                -- 최대값 제한 없음
NOCACHE;                  -- 캐시 사용 안함(없음)
--==>>Sequence SEQ_DROPSTU생성

CREATE OR REPLACE PROCEDURE PRC_DROPSTU_INSERT
( V_STU_ID      IN STUDENT.STU_ID%TYPE
, V_DROP_REASON IN DROPSTUDENT.DROP_REASON%TYPE)
IS
    V_STU_NAME  STUDENT.STU_NAME%TYPE;
    V_STU_SSN   STUDENT.STU_SSN%TYPE;
    V_STU_TEL   STUDENT.STU_TEL%TYPE;
    
BEGIN
    
    INSERT INTO DROPSTUDENT(STU_ID, DROP_REASON, DROP_STU_ID)
    VALUES(V_STU_ID, V_DROP_REASON, SEQ_DROPSTU.NEXTVAL);
    
END;
--==>>Procedure PRC_DROPSTU_INSERT이(가) 컴파일되었습니다.


EXEC PRC_STU_DELETE('S19_009');


CREATE OR REPLACE PROCEDURE PRC_REGISTER_INSERT
(V_STU_ID   IN STUDENT.STU_ID%TYPE
,V_OC_ID    IN OPENCOURSE.OC_ID%TYPE)
IS
 V_REG_ID       REGISTER.REG_ID%TYPE;
 V_REG_ID_NUM   NUMBER(4);
 V_OC_START     OPENCOURSE.OC_START%TYPE;
 OC_START_ERROR EXCEPTION;
BEGIN

    SELECT OC_START INTO V_OC_START FROM OPENCOURSE WHERE OC_ID=V_OC_ID;
    
    IF (SYSDATE<V_OC_START)
        THEN RAISE OC_START_ERROR;
    END IF;

    SELECT NVL(MAX(TO_NUMBER(SUBSTR(REG_ID,6))), 0 ) + 1 INTO V_REG_ID_NUM
    FROM REGISTER;

    V_REG_ID := 'RG'||TO_CHAR(SYSDATE,'YY')||'_'||LPAD(TO_CHAR(V_REG_ID_NUM), 4, '0');

    
    INSERT INTO REGISTER(STU_ID, OC_ID, REG_ID)
    VALUES (V_STU_ID, V_OC_ID, V_REG_ID);
    
    COMMIT;
    
    EXCEPTION
        WHEN OC_START_ERROR
            THEN RAISE_APPLICATION_ERROR(-20002, '과정 시작일이 지난 과정은 수강신청할 수 없습니다');
                 ROLLBACK;
        WHEN OTHERS
            THEN ROLLBACK;
END;





