<03/27>

--○ EMP 테이블에서 10번 부서에 근무하는 직원들 중
--   급여가 2500 이상인 사원들의
--   사원명, 직종명, 급여, 부서번호 항목을 조회한다

SELECT ENAME"사원명",JOB"직종명",SAL"급여",EMPNO"부서번호"
FROM EMP
WHERE SAL >= 2500 
AND DEPTNO = 10;

--○ 테이블복사 /
--> 내부적으로 대상 테이블 안에 있는 데이터 내용만 복사하는 과정
CREATE TABLE EMP2
AS
SELECT *
FROM EMP;

--※ 날짜 관련 세션 정보 변경 /
ALTER SESSION SET NLS_DATE_FORMAT = 'YYYY-MM-DD';

--○ 테이블 레벨의 커멘트 정보 확인 /

SELECT *
FROM USER_TAB_COMMENTS;

--○ 테이블 레벨의 커멘트 정보 입력
COMMENT ON TABLE TBL_EMP IS '사원정보';

--○ 컬럼 레벨의 커멘트 정보 확인
SELECT *
FROM USER_COL_COMMENTS;

--○ 컬럼 레벨의 커멘트 정보 입력(설정) /
COMMENT ON COLUMN TBL_DEPT.DEPTNO IS '부서정보';

--○ 커멘트 정보가 입력된 테이블의 컬럼 레벨의 정보 확인 /
SELECT *
FROM USER_COL_COMMENTS
WHERE TABLE_NAME = 'TBL_DEPT';

--※ 휴지통 비우기	/
PURGE RECYCLEBIN;


--■■■ 컬럼 구조의 추가 및 제거 ■■■--
--○ TBL_EMP 테이블에 주민등록번호 정보를 담을 수 있는 컬럼 추가	/
ALTER TABLE TBL_EMP
ADD SSN CHAR(13);

SELECT 0012121234567
FROM DUAL;
--==>> 12121234567 
-- 앞에 붙은 00이 사라짐

SELECT '0012121234567'
FROM DUAL;
--==>> 0012121234567
-- 주민번호 포멧 유지

--○ TBL_EMP테이블에서 추가한 SSN(주민등로번호) 컬럼 제거	/
ALTER TABLE TBL_EMP
DROP COLUMN SSN;

-- 행 제거하기	ㅇ
--①
SELECT *
FROM TBL_EMP
WHERE ENAME = 'SMITH';

--② SELECT * 을 DELETE로 변경
DELETE
FROM TBL_EMP
WHERE ENAME = 'SMITH';

--○확인
SELECT *
FROM TBL_EMP;
-->SMITH 관련 데이터가 삭제되었음을 확인

-- 테이블 구조는 그대로 남아있는 상태에서	ㅇ
-- 데이터 모두 소실(삭제)
DELETE TBL_EMP;
--==>13개 행 이(가) 삭제되었습니다.


테이블 삭제	ㅇ
DROP TABLE TBL_EMP;
--==>Table TBL_EMP이(가) 삭제되었습니다.

--○ NULL의 처리
--○ TBL_EMP테이블에서 커미션(COMM, 수당)이 NULL인 직원의
--   사원명, 직종명, 급여, 커미션 항목을 조회한다.

SELECT ENAME"사원명", JOB"직종명", SAL"급여", COMM"커미션"
FROM TBL_EMP
WHERE COMM IS NULL;

--○ TBL_EMP 테이블에서 20번 부서에 근무하지 않는 직원들의
--   사원명, 직종명, 부서번호, 항목을 조회한다.

SELECT ENAME "사원명", JOB "직종명", DEPTNO "부서번호"
FROM TBL_EMP
WHERE DEPTNO != 20;

SELECT ENAME "사원명", JOB "직종명", DEPTNO "부서번호"
FROM TBL_EMP
WHERE DEPTNO ^= 20;
--==>>위와 같은 결과값

SELECT ENAME "사원명", JOB "직종명", DEPTNO "부서번호"
FROM TBL_EMP
WHERE DEPTNO <> 20;
--==>>위와 같은 결과값

SELECT ENAME "사원명", JOB "직종명", DEPTNO "부서번호"
FROM TBL_EMP
WHERE DEPTNO=10 OR DEPTNO=30;

SELECT ENAME "사원명", JOB "직종명", DEPTNO "부서번호"
FROM TBL_EMP
WHERE DEPTNO IN(10,30);
--==>> 기존데이터에 다른 값이 추가되면 결과가 달라지게될 것. 주의

--○ TBL_EMP 테이블에서 커미션이 NULL이 아닌 직원들의
--   사원명, 직종명, 급여, 커미션 항목을 조회한다.
SELECT ENAME, JOB, SAL, COMM
FROM TBL_EMP
WHERE COMM IS NOT NULL;

SELECT ENAME, JOB, SAL, COMM
FROM TBL_EMP
WHERE NOT COMM IS NULL;

--○ TBL_EMP 테이블에서 모든 사원들의
--   사원번호, 사원명, 급여, 커미션, 연봉 항목을 조회한다.
--   단, 급여(SAL)는 매월 지급합니다.
--   또한, 수당(COMM)는 매년 지급한다.

--NVL()
SELECT NULL"ⓐ", NVL(NULL, 10)"ⓑ", NVL(10,20)"ⓒ"
FROM DUAL;
--==> (NULL) 10 10
--> 첫 번째 파라미터 값이 NULL이면 두 번째 파라미터 값을 반환한다
--  첫 번째 파라미터 값이 NULL이 아니면 그 값을 그대로 반환한다

SELECT EMPNO "사원번호", ENAME "사원명", SAL"급여", NVL(COMM,0)"커미션", (SAL*12)+NVL(COMM,0)"연봉"
FROM TBL_EMP;

--○ NVL2()
-->  첫 번째 파라미터 값이 NULL이 아닌 경우, 두 번째 파라미터 값을 반환하고
--   첫 번째 파라미터 값이 NULL인 경우, 세 번째 파라미터 값을 반환한다.

SELECT EMPNO "사원번호", ENAME "사원명", SAL"급여", COMM"커미션", NVL2(COMM, SAL*12+COMM, SAL*12)"연봉"
FROM TBL_EMP;

--○ COALESCE()
--> 매개변수 제한이 없는 형태로 인지하고 활용한다
--  맨 앞에 있는 매개변수부터 차례로 NULL인지 아닌지 확인하여
--  NULL 이 아닐 경우 적용(반환, 처리)하고
--  NULL 인 경우에는 그 다음 매게변수의 값으로 적용(반환, 처리)한다
--  NVL()나 NVL2()에 비해... 모~~~~ 든 경우의 수를 고려할 수 있는 특징을 갖고 있다.

SELECT EMPNO "사원번호", ENAME "사원명", SAL"급여", COMM"커미션", COALESCE((SAL*12+COMM), (COMM), (SAL*12), 0)"연봉"
FROM TBL_EMP;

--※ 날짜에 대한 세션 설정 변경
ALTER SESSION SET NLS_DATE_FORMAT = 'YYYY-MM-DD HH24:MI:SS';
--==>> Session이(가) 변경되었습니다.

--○ 현재 날짜 및 시간을 반환하는 함수
SELECT SYSDATE, CURRENT_DATE, LOCALTIMESTAMP
FROM DUAL;
--==>>
/*
2019-03-27 15:46:00	
2019-03-27 15:46:00	
19/03/27 15:46:00.000000000

--○ 컬럼과 컬럼의 연결(결합)
--   문자타입과 문자타입의 연결
--   『+』연산자를 통한 결합 수행은 불가능 → 『||』
SELECT '이원영' || '전훈의'
FROM DUAL;

SELECT EMPNO||ENAME
FROM TBL_EMP;

--※ 오라클에서는 문자 타입의 형태로 형 변환하는 별도의 과정 없이
--   위에서 처리한 내용 처럼 『||』만 삽입해주면 간단히 컬럼과 컬럼을
--   (서로 다른 종류의 데이터) 결합하는 것이 가능하다
--   MSSQL 에서는 모든 데이터를 문자타입으로 CONVERT 해야 한다.

--○ TBL_EMP 테이블의 정보를 활용하여
--   다음과 같은 결과를 얻을 수 있도록 쿼리문을 구성한다

-- SMITH의 현재 연봉은 9600인데 희망 연봉은 19200이다.
-- ALLEN의 현재 연봉은 19500인데 희망 연봉은 39000이다.
--                      :

SELECT *
FROM TBL_EMP;
--방식①
SELECT ENAME||'의 현재 연봉은 '||NVL2(COMM,SAL*12+COMM,SAL*12)||'인데 희망 연봉은 '||NVL2(COMM,SAL*12+COMM,SAL*12)*2||'이다.' "||연습"
FROM TBL_EMP;

--방식②
SELECT ENAME||'의 현재 연봉은 '||NVL(SAL*12+COMM,SAL*12)||'인데 희망 연봉은 '||NVL(SAL*12+COMM,SAL*12)*2||'이다.'
FROM TBL_EMP;

--방식③
SELECT ENAME||'의 현재 연봉은 '||COALESCE((SAL*12+COMM), (SAL*12), (COMM), 0)||'인데 희망 연봉은 '||COALESCE((SAL*12+COMM), (SAL*12), (COMM), 0)*2 ||'이다'
FROM TBL_EMP;

-- SMITH's 입사일은 1980-12-17이다. 그리고 급여는 800이다.
-- ALLEN's 입사일은 1981-02-20이다. 그리고 급여는 1600이다.

SELECT ENAME||'''s 입사일은'||HIREDATE||'이다. 그리고 급여는 '||SAL||'이다.'
FROM TBL_EMP;

--※ 문자열을 나타내는 홑따옴표 사이에서(시작과 끝)
--   홑따옴표 두 개가 홑따옴표 하나(어퍼스트로피)를 의미한다.
--   홑따옴표 『'』하나는 문자열의 시작을 나타내고
--   홑따옴표 『''』두 개는 문자열 영역 안에서 어퍼스트로피를 나타애며
--   다시 등장하는 홑따옴표 『'』하나가 문장려 영역의 종료를 의미하게 되는 것이다.


<03/28>
--○ UPPER(), LOWER(), INITCAP()
SELECT 'oRaCLe' "1", UPPER('oRaCLe') "2", LOWER('oRaCLe') "3", INITCAP('oRaCLe') "4"
FROM DUAL;
--==>> oRaCLe   ORACLE   oracle   Oracle
--> UPPER() 는 모두 대문자로 변환
--  LOWER() 는 모두 소문자로 변환
--  INITCAP() 는 첫 글자만 대문자로 하고 나머지는 모두 소문자로 변환하여 변환

--○ TBL_EMP 테이블에서 입사일이 1981년 9월 28일 입사한 직원의
--   사원명, 직종명, 입사일 항목을 조회한다.
--○ TO_DATE()
SELECT ENAME"사원명", JOB"직종명", HIREDATE"입사일"
FROM TBL_EMP
WHERE HIREDATE = TO_DATE('1981-09-28','YYYY-MM-DD');

--○ TBL_EMP 테이블에서 입사일이 1981년 9월 28일 이후(해당일 포함)로 입사한 직원의
--   사원명, 직종명, 입사일 항목을 조회한다.
SELECT ENAME,JOB,HIREDATE
FROM TBL_EMP
WHERE HIREDATE >= TO_DATE('1981-09-28','YYYY-MM-DD');
--※ 오라클에서는 날짜 데이터의 크기 비교가 가능하다
--   오라클에서 날짜 데이터에 대한 크기 비교 시
--   과거보다 미래를 더 큰 값으로 간주하여 처리된다.

--○ TBL_EMP 테이블에서 입사일이 1981년 4월 2일 부터
--   1981년 9월 28일 사이에 입사한 직원들의
--   사원명, 직종명, 입사일 항목을 조회한다(해당일 포함)
SELECT ENAME"사원명",JOB"직종명",HIREDATE"입사일"
FROM TBL_EMP
WHERE HIREDATE >= TO_DATE('1981-04-02','YYYY-MM-DD')
  AND HIREDATE <= TO_DATE('1981-09-28','YYYY-MM-DD');
--○ BETWEEN ⓐ AND ⓑ
SELECT ENAME"사원명",JOB"직종명",HIREDATE"입사일"
FROM TBL_EMP
WHERE HIREDATE BETWEEN TO_DATE('1981-04-02','YYYY-MM-DD') 
                   AND TO_DATE('1981-09-28','YYYY-MM-DD');

--○ C부터 S까지 이름검색
SELECT *
FROM TBL_EMP
WHERE ENAME BETWEEN 'C' AND 'S';
-->>S로시작하는 사람들 이름이 빠져있음
--  날짜나 숫자에서는 A-B포함해서 검색되는데
--  왜 사람이름은 뒤 문자쪽 이름이 검색되지 않았을까??
--  사전식으로 검색하기 때문. C부터 S가 시작하는 페이지까지 검색된다
--  S로만 시작하는 사람들의 이름은 나옴

--※ BETWEEN ⓐ AND ⓑ는 날짜형, 숫자형, 문자형 데이터 모두에 적용된다.
--   단, 문자형일 경우 아스키코드 순서를 따르기 때문에
--   대문자가 앞쪽에 위치하고 소문자가 뒤쪽에 위치한다
--   또한, BETWEEN ⓐ AND ⓑ는 쿼리문이 수행되는 시점에서
--   오라클 내부적으로는 부등호 연산자의 형태로 바뀌어 연산이 처리된다.

SELECT *
FROM TBL_EMP
WHERE ENAME BETWEEN 'C' AND 's';
-->>아스키 코드식으로 검색되기때문에 A~Z~a~s까지 모두 검색됨

--○ ASCII()
SELECT ASCII('A'),ASCII('B'),ASCII('a'),ASCII('b')
FROM DUAL;

--○ TBL_EMP 테이블에서 직종이 SALESMAN과 CLERK인 사원의
--   사원명, 직종명, 급여 항목을 조회한다.
SELECT ENAME, JOB, SAL
FROM TBL_EMP
WHERE JOB = 'SALESMAN' OR JOB = 'CLERK';

SELECT ENAME, JOB, SAL
FROM TBL_EMP
WHERE JOB IN ('SALESMAN'. 'CLERK');

SELECT ENAME, JOB, SAL
FROM TBL_EMP
WHERE JOB =ANY ('SALESMAN','CLERK'); --cf.『=ALL』
-- 그 뒤의 데이터중 아무거나 일치하면 조건이 TRUE
-- cf) =ALL은 이것도 가지고 있고 저것도 가지고 있어야 조건 TRUE (AND와 같은 방식)

--※ 위의 3가지 유형의 쿼리문은 모두 같은 결과를 반환한다.
--   하지만 맨 위의 쿼리문이 가장 빠르게 처리된다
--   물론 메모리에 대한 내용이 아니라 CPU에 관한 내용이므로
--   이 부분까지 감안하여 쿼리문을 구성하는 일은 많지 않다
--   → 『IN』과 『=ANY』는 같은 연산자 효과를 가진다
--      모두 내부적으로는 『OR』구조로 변경되어 연산 처리된다.

--○ TBL_SAWON 테이블에서 이원영 사원의 정보를 모두 조회한다. LIKE
SELECT *
FROM TBL_SAWON
WHERE SANAME = '이원영';

SELECT *
FROM TBL_SAWON
WHERE SANAME LIKE '이원영';
--==>>1001	이원영	8706241234567	01/01/03	3000


--※ LIKE : 동사 → 좋아하다
--          부사 → ~와 같이, ~처럼

--※ WILD CHARACTER → 『%』
--   『LIKE』와 함께 사용되는 『%』는 모든 글자를 의미하고
--   『LIKE』와 함께 사용되는 『_』는 아무 글자 1개를 의미한다.

--○ TBL_SAWON 테이블에서 성씨가 『이』씨인 사원의
--   사원명, 주민번호, 급여 항목을 조회한다.
SELECT SANAME, JUBUN, SAL
FROM TBL_SAWON
WHERE SANAME LIKE '이__';

SELECT SANAME, JUBUN, SAL
FROM TBL_SAWON
WHERE SANAME LIKE '이%';

--○ TBL_SAWON 테이블에서 이름의 마지막 글자가 『이』로
--   끝나는 사원의 사원명, 주민번호, 입사일, 급여 항목을 조회한다.
SELECT SANAME, JUBUN, HIREDATE, SAL
FROM TBL_SAWON
WHERE SANAME LIKE '%이';
--==>>
/*
이하이	0405064234567	10/07/15	1000
남이	6012121234567	81/10/10	4000
*/

SELECT SANAME, JUBUN, HIREDATE, SAL
FROM TBL_SAWON
WHERE SANAME LIKE '__이';
--==> 이렇게 조회할 경우 _이는 누락. (남이) 이러한 경우에선 '%이'를 사용하도록 하자

--○ TBL_SAWON 테이블에서 사원 이름 안에 『이』라는 글자가
--   하나라도 포함되어 있으면 그 사원의
--   사원번호, 사원명, 입사일, 급여 항목을 조회한다.
SELECT SANO, SANAME, HIREDATE, SAL
FROM TBL_SAWON
WHERE SANAME LIKE '%이%';

--○ TBL_SAWON 테이블에서 사원 이름 안에 『이』라는 글자가
--   두번 포함되어 있으면 그 사원의
--   사원번호, 사원명, 입사일, 급여 항목을 조회한다.
SELECT SANO, SANAME, HIREDATE, SAL
FROM TBL_SAWON
WHERE SANAME LIKE '%이이%'; -- 『이』가 연속으로 두번 들어있는 데이터만 검색됨(주의)

SELECT SANO, SANAME, HIREDATE, SAL
FROM TBL_SAWON
WHERE SANAME LIKE '%이%이%';

--○ TBL_SAWON 테이블에서 성씨가 남씨인 사원의
--   사원명, 주민번호, 급여 항목을 조회한다.
SELECT SANAME, JUBUN, SAL
FROM TBL_SAWON
WHERE SANAME LIKE '남%';
--==>>
/*
남상현	9302131234567	3000
남궁선	7202021234567	2000
남이  	6012121234567	4000
*/
-->> 남궁씨때문에 결과도출 불가
--   데이터베이스 설계 시 성과 이름을 분리해서 처리해야 할
--   업무 계획이 있다면(지금 당장은 아니더라도...) 테이블에서 성 컬럼과
--   이름 컬럼을 분리하여 구성해야 한다.

--○ TBL_SAWON테이블에서 여직원들의 사원명, 주민번호, 급여 항목을 조회한다
SELECT SANAME, JUBUN, SAL
FROM TBL_SAWON
WHERE JUBUN LIKE '______2%' OR JUBUN LIKE '______4%';

SELECT SANAME, JUBUN, SAL
FROM TBL_SAWON
WHERE JUBUN LIKE '______2______' OR JUBUN LIKE '______4______';

--○ TBL_WATCH테이블의 BIGO 컬럼에
--   『99.99%』라는 글자가 들어있는 행(레코드)의 정보를 조회한다.
SELECT *
FROM TBL_WATCH
WHERE BIGO LIKE '%99.99\%%' ESCAPE '\';

SELECT *
FROM TBL_WATCH
WHERE BIGO LIKE '%99.99$%%' ESCAPE '$';
--==>>

--※ ESCAPE로 정한 문자의 다음 한 글자는 와일드캐릭터에서 탈출시켜라...
--   『ESCAPE '\'』
--   일반적으로 사용빈도 낮은 특수문자(특수기호)를 사용한다.


-- ■■■ COMMIT / ROLLBACK ■■■--

-- 데이터는 TBL_DEPT 테이블이 저장되어 있는
-- 하드디스크상에 물리적으로 적용되어 저장된 것이 아니라
-- 메모리(RAM)상에 입력된 것이다.
-- 메모리상에 입력된 이 데이터를 실제 하드디스크상에 물리적으로 저장하기 위해서는
--  COMMIT을 수행해야한다.

--○ 커밋
COMMIT;

--○ 롤백
ROLLBACK;

--※ COMMIT 을 실행한 이후로 DML 구문(INSERT, UPDATE, DELETE)을 통해
--   변경된 데이터만 취소할 수 있는 것일 뿐
--   DML 명령을 사용한 후 COMMIT 하고나서 ROLLBACK을 실행햐봐여
--   이전 상태로 되돌릴 수 없다(아무런 소용이 없다.)

--○ 데이터 수정(TBL_DEPT)
UPDATE TBL_DEPT
SET DNAME='연구부', LOC='인천'
WHERE DEPTNO=50;
--==>>1 행 이(가) 업데이트되었습니다.
-- ★업데이트 구문 작성순서 1.UPDATE~~ 2.WHERE절 3.SET절

-- ★ 테이블 생성시 오토커밋된다는 것 잊지 말자


--■■■ 정렬(ORDER BY) 절 ■■■--
SELECT ENAME"사원명", DEPTNO"부서번호", JOB"직종", SAL"급여"
     , SAL*12+NVL(COMM, 0)"연봉", COMM"커미션"
FROM TBL_EMP
ORDER BY COMM ASC;
--==>> ORDER BY 정렬기준이되는컬럼 ASC(오름차순),DESC(내림차순);
-- 오라클에서는 NULL값을 가장 큰 값으로 간주함
-- 오름차순 생략가능
-- 내림차순 생략 불가~

SELECT ENAME"사원명", DEPTNO"부서번호", JOB"직종", SAL"급여"
     , SAL*12+NVL(COMM, 0)"연봉", COMM"커미션"
FROM TBL_EMP
ORDER BY 연봉 DESC;
--> ORDER BY 절보다 SELECT 절이 먼저 처리되기 때문에
--  컬럼명 대신 SELECT 절에서 사용한 ALIAS(별칭)을
--  ORDER BY 절에서 사용해도 문제가 발생하지 않는다.(가능하다)

SELECT ENAME"사원명", DEPTNO"부서 번호", JOB"직종", SAL"급여"
     , SAL*12+NVL(COMM, 0)"연봉", COMM"커미션"
FROM TBL_EMP
ORDER BY 부서 번호 DESC;
--==>> 에러 발생

SELECT ENAME"사원명", DEPTNO"부서 번호", JOB"직종", SAL"급여"
     , SAL*12+NVL(COMM, 0)"연봉", COMM"커미션"
FROM TBL_EMP
ORDER BY "부서 번호" DESC;
--==>> 정렬

SELECT ENAME"사원명", DEPTNO"부서 번호", JOB"직종", SAL"급여"
     , SAL*12+NVL(COMM, 0)"연봉", COMM"커미션"
FROM TBL_EMP
ORDER BY 2;
--==>> ASC생략
--> TBL_EMP 테이블이 갖고 있는 테이블의 고유한 컬럼 순서가 아니라
--  SELECT 처리 되는 두 번째 컬럼(즉, DEPTNO)을 기준으로 정렬되는 것을 확인
--  ASC 생략된 상태 → 오름차순 정렬되는 것을 확인

SELECT ENAME, DEPTNO, JOB, SAL
FROM TBL_EMP
ORDER BY 2, 4; -- DEPTNO 기준 1차 정렬, SAL 기준 2차정렬... ASC

SELECT ENAME, DEPTNO, JOB, SAL
FROM TBL_EMP
ORDER BY 2, 3, 4 DESC;
--> ① DEPTNO(부서번호) 기분 오름차순 정렬
--  ② JOB(직종명) 기준 오름차순 정렬
--  ③ SAL(급여) 기준 내림차순 정렬
--  (3차 정렬 수행)

--○ CONCAT() -- 문자열 결합
SELECT '전훈의'||'이지혜' "①"
     , CONCAT('전훈의','이지혜')"②"
FROM DUAL;
--==>>전훈의이지혜	전훈의이지혜

SELECT ENAME||JOB"①"
     , CONCAT(ENAME, JOB)"②"
FROM TBL_EMP;

SELECT ENAME||JOB||DEPTNO"①"
     , CONCAT(ENAME, JOB, DEPTNO)"②"
FROM TBL_EMP;
--==>>에러 발생
--> 2개의 문자열을 결합시켜주는 기능을 가진 함수,
--  오로지 2개만 결합시킬 수 있다.

SELECT ENAME||JOB||DEPTNO"①"
     , CONCAT(CONCAT(ENAME, JOB), DEPTNO)"②"
FROM TBL_EMP;

/*JAVA의 String.Substring()
obj.substring()
---
 ↓
 문자열.substring(n, m);
                 n부터 m-1까지...(0부터 시작하는 인덱스 기준)
*/

--○ SUBSTR() 갯수 기반 / SUBSTRB() 바이트 기반 -- 문자열 추출함수
SELECT ENAME"①"
     , SUBSTR(ENAME, 1, 2)"②"
     , SUBSTR(ENAME, 2, 2)"③"
     , SUBSTR(ENAME, 3, 2)"④"
     , SUBSTR(ENAME, 2)"⑤"
FROM TBL_EMP;
--> 문자열을 추출하는 기능을 가진 함수
--  첫번째 파라미터 값은 대상 문자열(추출의 대상)
--  두번째 파라미터 값은 추출을 시작하는 위치(단, 인덱스는 1부터 시작)★
--  세번째 파라미터 값은 추출할 문자열의 갯수(생략 시.. 시작위치부터 끝까지)
/*
SMITH	SM	MI	IT	MITH
ALLEN	AL	LL	LE	LLEN
WARD	WA	AR	RD	ARD
JONES	JO	ON	NE	ONES
MARTIN	MA	AR	RT	ARTIN
BLAKE	BL	LA	AK	LAKE
CLARK	CL	LA	AR	LARK
SCOTT	SC	CO	OT	COTT
KING	KI	IN	NG	ING
TURNER	TU	UR	RN	URNER
ADAMS	AD	DA	AM	DAMS
JAMES	JA	AM	ME	AMES
FORD	FO	OR	RD	ORD
MILLER	MI	IL	LL	ILLER
*/

--○ TBL_SAWON 테이블에서 성별이 남성인 사원만
--   사원번호, 사원명, 주민번호, 급여 항목을 조회한다.
--   단, SUBSTR() 함수를 사용할 수 있도록 하며
--   급여 기준으로 내림차순 정렬을 수행할 수 있도록 한다.
SELECT SANO, SANAME, JUBUN, SAL
FROM TBL_SAWON
WHERE SUBSTR(JUBUN,7,1) = '1' OR SUBSTR(JUBUN,7,1) = '3'
ORDER BY SAL DESC;

SELECT SANO, SANAME, JUBUN, SAL
FROM TBL_SAWON
WHERE SUBSTR(JUBUN,7,1) IN ('1','3')
ORDER BY SAL DESC;

--○ LENGTH() / LENGTHB()
SELECT ENAME"①"
     , LENGTH(ENAME)"②"
     , LENGTHB(ENAME)"③"
FROM TBL_EMP;
--> LENGTH()는 글자 수를 반환, LENGTHB()는 바이트 수를 반환

--○ INSTR()	--검색
SELECT 'ORACLE ORAHOME BIORA'"①"
     , INSTR('ORACLE ORAHOME BIORA','ORA',1,1)"②"
     , INSTR('ORACLE ORAHOME BIORA','ORA',1,2)"③"
     , INSTR('ORACLE ORAHOME BIORA','ORA',2,1)"④"
     , INSTR('ORACLE ORAHOME BIORA','ORA',2)"⑤"
     , INSTR('ORACLE ORAHOME BIORA','ORA',2,2)"⑥"
FROM DUAL;
--> 첫 번째 파라미터 값에 해당하는 문자열에서...(대상 문자열, 타겟)
--  두 번째 파라미터 값을 통해 넘겨준 문자열이 등자하는 위치를 찾아라~!!!
--  세 번째 파라미터 값은 찾기 시작하는... (즉 스캔을 시작하는) 위치
--  네 번째 파라미터 값은 몇 번째 등장하는 값을 찾을 것인지에 대한 설정(1은 생략 가능)
--==>>
/*
①                    ②        ③         ④         ⑤         ⑥
-------------------- ---------- ---------- ---------- ---------- ----------
ORACLE ORAHOME BIORA          1          8          8          8         18
*/

SELECT '나의오라클 집으로오라 합니다'"①"
     , INSTR('나의오라클 집으로오라 합니다', '오라', 1)"②"
     , INSTR('나의오라클 집으로오라 합니다', '오라', 2)"③"
     , INSTR('나의오라클 집으로오라 합니다', '오라', 10)"④"
     , INSTR('나의오라클 집으로오라 합니다', '오라', 11)"⑤"
FROM DUAL;
--> 마지막 파라미터(네 번째 파라미터) 값을 생략한 형태로 사용~!!!!
--==>> 나의오라클 집으로오라 합니다	3	3	10	0

--○ REVERSE()
SELECT 'ORACLE'"①"
     , REVERSE('ORACLE')"②"
     , REVERSE('오라클')"③"
FROM DUAL;
--> 대상 문자열을 거꾸로 반환한다( 단, 바이트 기반 처리이기때문에 2바이트인 한글은 제외)
--==>>ORACLE	ELCARO  ???
/*
FILENO	FILENAME
1	C:\AAA\BBB\CCC\SALES.DOC
2	C:\AAA\PANMAE.XXLS
3	D:\RESEARCH.PPT
4	C:\DOCUMENTS\STUDY.HWP
5	C:\DOCUMENTS\TEMP\SQL.TXT
6	D:\SHARE\F\TEST.PNG
7	C:\USER\GUILDONG\PICTURE\PHOTO\SPRING.JPG
8	C:\ORACLESTUDY\20190328_01_SCOTT.SQL
*/
/*
FILENO	FILENAME
1	SALES.DOC
2	PANMAE.XXLS
3	RESEARCH.PPT
4	STUDY.HWP
5	SQL.TXT
6	TEST.PNG
7	SPRING.JPG
8	20190328_01_SCOTT.SQL
*/

--○ TBL_FILES 테이블 대상으로 위와 같이 조회될 수 있도록
--   쿼리문을 작성한다.

--학생들 풀이
SELECT FILENO"파일번호", SUBSTR(FILENAME, INSTR(FILENAME,'\',-1)+1)"파일명"
FROM TBL_FILES;

SELECT FILENO"파일번호", SUBSTR(FILENAME, LENGTH(FILENAME)-INSTR(REVERSE(FILENAME),'\')+2)"파일명"
FROM TBL_FILES;

SELECT FILENO"파일번호", REVERSE(SUBSTR(REVERSE(FILENAME), 1, INSTR(REVERSE(FILENAME), '\', 1)-1))"파일명"
FROM TBL_FILES;

--선생님 풀이
SELECT FILENO"파일번호", FILENAME"경로포함파일명", SUBSTR(FILENAME, 16, 9)"파일명"
FROM TBL_FILES
WHERE FILENO=1;
--==>>1	C:\AAA\BBB\CCC\SALES.DOC	SALES.DOC

/*
1	COD.SELAS\CCC\BBB\AAA\:C
2	SLXX.EAMNAP\AAA\:C
3	TPP.HCRAESER\:D
4	PWH.YDUTS\STNEMUCOD\:C
5	TXT.LQS\PMET\STNEMUCOD\:C
6	GNP.TSET\F\ERAHS\:D
7	GPJ.GNIRPS\OTOHP\ERUTCIP\GNODLIUG\RESU\:C
*/

SELECT FILENO"파일번호", FILENAME"경로포함파일명", REVERSE(FILENAME)"거꾸로된파일명"
FROM TBL_FILES;

SELECT FILENO"파일번호", FILENAME"경로포함파일명", SUBSTR(REVERSE(FILENAME),1,최초'\'가 등장하는위치-1)"거꾸로된파일명"
FROM TBL_FILES;

--최초'\'가 등장하는위치
INSTR(REVERSE(FILENAME),'\',1)  -- 마지막 매개변수 1생략

SELECT FILENO"파일번호", SUBSTR(REVERSE(FILENAME),1,INSTR(REVERSE(FILENAME),'\',1)-1)"거꾸로된파일명"
FROM TBL_FILES;

SELECT FILENO"파일번호", REVERSE(SUBSTR(REVERSE(FILENAME),1,INSTR(REVERSE(FILENAME),'\',1)-1))"거꾸로된파일명"
FROM TBL_FILES;

--○ LPAD() -- 순서주의
--> Byte 공간을 확보하여 왼쪽부터 문자로 채우는 기능을 가진 함수 
SELECT 'ORACLE'"①"
     , LPAD('ORACLE', 10, '*')"②"
FROM DUAL;
--==>>ORACLE	****ORACLE  
--> ① 10BYTE 공간을 확보한다                → 두번째 파라미터(매개변수)부터 먼저 본다.★
--  ⑤ 확보한 공간에 'ORACLE' 문자열을 담는다 → 첫 번째 파라미터 값에 의해
--  ③ 남아있는 BYTE 공간을 왼쪽부터 세번째 파라미터값으로 채운다
--  ④ 이렇게 구성된 최종 결과값을 반환한다.

--○ RPAD()
--> Byte 공간을 확보하여 오른쪽부터 문자로 채우는 기능을 가진 함수
SELECT 'ORACLE'"①"
     , RPAD('ORACLE', 10, '*')"②"
FROM DUAL;
--==>>ORACLE	ORACLE****  
--> ① 10BYTE 공간을 확보한다                → 두번째 파라미터(매개변수)부터 먼저 본다.
--  ⑤ 확보한 공간에 'ORACLE' 문자열을 담는다 → 첫 번째 파라미터 값에 의해
--  ③ 남아있는 BYTE 공간을 오른쪽부터 세번째 파라미터값으로 채운다
--  ④ 이렇게 구성된 최종 결과값을 반환한다.


--○ LTRIM()
SELECT 'ORAORAORACLEORACLE'"①"  --오라 오라 오라클 오라클
     , LTRIM('ORAORAORACLEORACLE', 'ORA')"②"
     , LTRIM('AAAORAORAORACLEORACLE', 'ORA')"③"
     , LTRIM('ORAoRAORACLEORACLE', 'ORA')"④"
     , LTRIM('ORA ORAORACLEORACLE', 'ORA')"⑤"
     , LTRIM('             ORACLE')"⑥" -- 왼쪽 공백 제거 함수로 활용(두 번째 파라미터 생략)
FROM DUAL;
--==>>
/*
①                 ②        ③        ④               ⑤               ⑥
------------------ --------- --------- --------------- ---------------- ------
ORAORAORACLEORACLE CLEORACLE CLEORACLE oRAORACLEORACLE  ORAORACLEORACLE ORACLE
*/
-- like손톱깎이
-- 통째로 잘라내는게 아니라 왼쪽끝(LTRIM)에서부터 잘라나감
-- 손톱을 버리고 손을 갖는다. substr와는 반대
-- 'ORA'통째로 검색하는게 아니라 O,R,A 따로 처리하는것
-- 대소문자 구별 (④)
-- 자르다가 멈추면 끝
-- 공백도 못잘라내기때문에 공백포함 문자열 반환(⑤)
-- 공백 제거하는 함수로 많이 사용(⑥)

--> 첫 번째 파라미터 값에 해당하는 문자열을 대상으로
--  왼쪽부터 연속적으로 두 번째 파라미터 값에서 지정한 글자와 같은 글자가 등장할 경우
--  이를 제거한 결과값을 반환한다
--  단, 완성형으로 처리되지 않는다.

--TRIM은 한글도 사용가능
SELECT LTRIM('이김신이김신이이신신김이신이이김김이신박이김신','이김신')"TEST"
FROM DUAL;
--==>박이김신

--○ RTRIM()
SELECT 'ORAORAORACLEORACLE'"①"  --오라 오라 오라클 오라클
     , RTRIM('ORAORAORACLEORACLE', 'ORA')"②"
     , RTRIM('AAAORAORAORACLEORACLE', 'ORA')"③"
     , RTRIM('ORAoRAORACLEORACLE', 'ORA')"④"
     , RTRIM('ORA ORAORACLEORACLE', 'ORA')"⑤"
     , RTRIM('ORACLE             ')"⑥" -- 오른쪽 공백 제거 함수로 활용(두 번째 파라미터 생략)
FROM DUAL;
--==>>
/*
①                 ②                 ③                    ④                 ⑤                  ⑥     
------------------ ------------------ --------------------- ------------------ ------------------- ------
ORAORAORACLEORACLE ORAORAORACLEORACLE AAAORAORAORACLEORACLE ORAoRAORACLEORACLE ORA ORAORACLEORACLE ORACLE

*/
--> 첫 번째 파라미터 값에 해당하는 문자열을 대상으로
--  오른쪽부터 연속적으로 두 번째 파라미터 값에서 지정한 글자와 같은 글자가 등장할 경우
--  이를 제거한 결과값을 반환한다
--  단, 완성형으로 처리되지 않는다.

--○ TRANSLATE() 
--> 1 : 1로 바꿔준다
SELECT TRANSLATE('MY ORACLE SERVER','ABCDEFGHIJKLMNOPQRSTUVWXYZ', 'abcdefghijklmnopqrstuvwxyz')
FROM DUAL;
--==>>my oracle server

SELECT TRANSLATE('010-6575-2297','0123456789','영일이삼사오육칠팔구')
FROM DUAL;
--==>>영일영-육오칠오-이이구칠

--○ REPLACE()
--> 묶음으로 처리한다
SELECT REPLACE('MY ORACLE ORAHOME','ORA','오라')
FROM DUAL;
--==>MY 오라CLE 오라HOME

































